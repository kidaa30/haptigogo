package com.hapticnavigation.parser;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
/**
 * RouteSaxParser class uses a single constructor and a single method that uses Simple API for XML parsing in order to retrieve coordinates, heading and descriptions from Google Earth/Maps KML files.
 * This class has one constructor that allows the user to initialize the input source for the parser. It also has one simple function that 
 * initializes the required variables for parsing and returns an List<Strings> for all the parsed data. 
 * @author Essa Haddad. Texas A&M.
 *
 */
public class RouteSaxParser {
	
	private InputSource m_inputSource;
	/**
	 * This constructor takes an <code>InputStream</code> for the executeSaxParsing to work on.
	 * @param inputStream . A KML file generated by Google Earth or a KML file generated by GoogleMapsUriProcessor class.
	 * @link GoogleMapsUriProcessor
	 * @see #executeSaxParsing()
	 */
	
	public RouteSaxParser(InputStream inputStream){
		m_inputSource = new InputSource(inputStream);
	}
	/**
	 * executeSaxParsing initializes the SAX Parser variables and calls CoordinatesExtractor class [SAX Handler] to retrieve a List<String>
	 * that holds three strings; A string of Route Coordinates, Headings, and a string with all the Landmarks.
	 * @return <code>List</code> of type String that holds 4 Strings holding route coordinates, headings, landmarks, and landmark names and descriptions
	 * @throws IOException
	 * @throws SAXException
	 * @throws ParserConfigurationException
	 */
	
	public List<String> executeSaxParsing() throws IOException, SAXException, ParserConfigurationException{
		SAXParserFactory spf = SAXParserFactory.newInstance();
		spf.setNamespaceAware(true);
	    SAXParser parser = spf.newSAXParser();
	    XMLReader xr = parser.getXMLReader();
	    CoordinatesExtractor coordinatesExtractor = new CoordinatesExtractor();
	    xr.setContentHandler(coordinatesExtractor);
	    xr.parse(m_inputSource);
	    return(coordinatesExtractor.getParsedData());
	    }
}